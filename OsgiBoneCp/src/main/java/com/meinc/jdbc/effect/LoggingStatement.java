package com.meinc.jdbc.effect;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class LoggingStatement implements Statement {
    private static final Log log = LogFactory.getLog(LoggingStatement.class);

    protected Statement delegate;
    protected int connectionId;
    
    public LoggingStatement(Statement target, int connectionId) {
        this.delegate = target;
        this.connectionId = connectionId;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        log.info(connectionId+"--#addBatch("+sql+")");
        delegate.addBatch(sql);
    }

    @Override
    public void cancel() throws SQLException {
        log.info(connectionId+"--#cancel()");
        delegate.cancel();
    }

    @Override
    public void clearBatch() throws SQLException {
        log.info(connectionId+"--#clearBatch()");
        delegate.clearBatch();
    }

    @Override
    public void clearWarnings() throws SQLException {
        log.info(connectionId+"--#clearWarnings()");
        delegate.clearWarnings();
    }

    @Override
    public void close() throws SQLException {
        log.info(connectionId+"--#close()");
        delegate.close();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        log.info(connectionId+"--#execute("+sql+","+autoGeneratedKeys+")");
        return delegate.execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        log.info(connectionId+"--#execute("+sql+","+columnIndexes+")");
        return delegate.execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        log.info(connectionId+"--#execute("+sql+","+columnNames+")");
        return delegate.execute(sql, columnNames);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        log.info(connectionId+"--#execute("+sql+")");
        return delegate.execute(sql);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        log.info(connectionId+"--#executeBatch()");
        return delegate.executeBatch();
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        log.info(connectionId+"--#executeQuery("+sql+")");
        return delegate.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        log.info(connectionId+"--#executeUpdate("+sql+","+autoGeneratedKeys+")");
        return delegate.executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        log.info(connectionId+"--#executeUpdate("+sql+","+columnIndexes+")");
        return delegate.executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        log.info(connectionId+"--#executeUpdate("+sql+","+columnNames+")");
        return delegate.executeUpdate(sql, columnNames);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        log.info(connectionId+"--#executeUpdate("+sql+")");
        return delegate.executeUpdate(sql);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return delegate.getConnection();
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return delegate.getFetchDirection();
    }

    @Override
    public int getFetchSize() throws SQLException {
        return delegate.getFetchSize();
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return delegate.getGeneratedKeys();
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return delegate.getMaxFieldSize();
    }

    @Override
    public int getMaxRows() throws SQLException {
        return delegate.getMaxRows();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return delegate.getMoreResults();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return delegate.getMoreResults(current);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return delegate.getQueryTimeout();
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return delegate.getResultSet();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return delegate.getResultSetConcurrency();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return delegate.getResultSetHoldability();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return delegate.getResultSetType();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return delegate.getUpdateCount();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return delegate.getWarnings();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return delegate.isClosed();
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return delegate.isPoolable();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return delegate.isWrapperFor(iface);
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        log.info(connectionId+"--#setCursorName("+name+")");
        delegate.setCursorName(name);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        log.info(connectionId+"--#setEscapeProcessing("+enable+")");
        delegate.setEscapeProcessing(enable);
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        log.info(connectionId+"--#setFetchDirection("+direction+")");
        delegate.setFetchDirection(direction);
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        log.info(connectionId+"--#setFetchSize("+rows+")");
        delegate.setFetchSize(rows);
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        log.info(connectionId+"--#setMaxFieldSize("+max+")");
        delegate.setMaxFieldSize(max);
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        log.info(connectionId+"--#setMaxRows("+max+")");
        delegate.setMaxRows(max);
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        log.info(connectionId+"--#setPoolable("+poolable+")");
        delegate.setPoolable(poolable);
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        log.info(connectionId+"--#setQueryTimeout("+seconds+")");
        delegate.setQueryTimeout(seconds);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        log.info(connectionId+"--#unwrap("+iface+")");
        return delegate.unwrap(iface);
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        log.info(connectionId+"--#closeOnCompletion()");
        delegate.closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        log.info(connectionId+"--#isCloseOnCompletion()");
        return delegate.isCloseOnCompletion();
    }
}
